//
//  AppDelegate.swift
//  MySampleApp
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.5
//

import UIKit
import AWSMobileHubHelper

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
    var window: UIWindow?
    func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {
        // Override point for customization after application launch.
        let pushManager: AWSPushManager = AWSPushManager.defaultPushManager()
        pushManager.delegate = self
        pushManager.registerForPushNotifications()

        
        if let topicARNs = pushManager.topicARNs {
            pushManager.registerTopicARNs(topicARNs)
        }
        return AWSMobileClient.sharedInstance.didFinishLaunching(application, withOptions: launchOptions)
    }
    
    
    
    
    
    func application(application: UIApplication, openURL url: NSURL, sourceApplication: String?, annotation: AnyObject) -> Bool {
        // print("application application: \(application.description), openURL: \(url.absoluteURL), sourceApplication: \(sourceApplication)")
        return AWSMobileClient.sharedInstance.withApplication(application, withURL: url, withSourceApplication: sourceApplication, withAnnotation: annotation)
    }
    
    func applicationWillResignActive(application: UIApplication) {
        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
        // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
    }
    
    func applicationDidEnterBackground(application: UIApplication) {
        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
    }
    
    
    func applicationDidBecomeActive(application: UIApplication) {
        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
        AWSMobileClient.sharedInstance.applicationDidBecomeActive(application)
    }
    
    func applicationWillTerminate(application: UIApplication) {
        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
    }
    
    func applicationWillEnterForeground(application: UIApplication) {
        // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
        
        // Clear the badge icon when you open the app.
        UIApplication.sharedApplication().applicationIconBadgeNumber = 0
    }
    
    func application(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData) {
        AWSMobileClient.sharedInstance.application(application, didRegisterForRemoteNotificationsWithDeviceToken: deviceToken)
    }
    
    func application(application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: NSError) {
        AWSMobileClient.sharedInstance.application(application, didFailToRegisterForRemoteNotificationsWithError: error)
    }
    
    func application(application: UIApplication, didReceiveRemoteNotification userInfo: [NSObject : AnyObject]) {
        AWSMobileClient.sharedInstance.application(application, didReceiveRemoteNotification: userInfo)
    }
    
}

// MARK:- UITableViewDelegate

/*extension AppDelegate: UITableViewDelegate {
    
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return AWSPushManager.defaultPushManager().topics.count
    }
    
    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        let pushManager = AWSPushManager.defaultPushManager()
        if pushManager.enabled {
            let topic = pushManager.topics[indexPath.row]
            if topic.subscribed {
                // Unsubscribe
                let alertController = UIAlertController(title: "Please Confirm", message: "Do you want to unsubscribe from the topic?", preferredStyle: .Alert)
                let unsubscribeAction = UIAlertAction(title: "Unsubscribe", style: .Default, handler: {(action: UIAlertAction) -> Void in
                    let topic = AWSPushManager.defaultPushManager().topics[indexPath.row]
                    topic.unsubscribe()
                })
                let cancelAction = UIAlertAction(title: "Cancel", style: .Cancel, handler: nil)
                alertController.addAction(unsubscribeAction)
                alertController.addAction(cancelAction)
                presentViewController(alertController, animated: true, completion: nil)
            } else {
                // Subscribe
                topic.subscribe()
            }
        }
    }
   
    
}*/

// MARK:- UITableViewDataSource



// MARK:- AWSPushManagerDelegate

extension AppDelegate: AWSPushManagerDelegate {
    func pushManagerDidRegister(pushManager: AWSPushManager) {
        print("Successfully enabled Push Notifications.")
       // pushNotificationSwitch.on = pushManager.enabled
        // Subscribe the first topic among the configured topics (all-device topic)
        if let defaultSubscribeTopic = pushManager.topicARNs?.first {
            let topic = pushManager.topicForTopicARN(defaultSubscribeTopic)
            topic.subscribe()
        }
        if let defaultSubscribeTopic = pushManager.topicARNs?.last {
            let topic = pushManager.topicForTopicARN(defaultSubscribeTopic)
            topic.subscribe()
        }
    }
    
    func pushManager(pushManager: AWSPushManager, didFailToRegisterWithError error: NSError) {
      //  pushNotificationSwitch.on = false
        //showAlertWithTitle("Error", message: "Failed to enable Push Notifications.")
    }
    
    func pushManager(pushManager: AWSPushManager, didReceivePushNotification userInfo: [NSObject : AnyObject]) {
        dispatch_async(dispatch_get_main_queue(), {
            print("Received a Push Notification: \(userInfo)")
         //   self.showAlertWithTitle("Received a Push Notification.", message: userInfo.description)
        })
    }
    
    func pushManagerDidDisable(pushManager: AWSPushManager) {
        print("Successfully disabled Push Notification.")
    }
    
    func pushManager(pushManager: AWSPushManager, didFailToDisableWithError error: NSError) {
        print("Failed to subscibe to a topic: \(error)")
      //  showAlertWithTitle("Error", message: "Failed to unsubscribe from all the topics.")
    }
}

// MARK:- AWSPushTopicDelegate

extension AppDelegate : AWSPushTopicDelegate {
    
    func topicDidSubscribe(topic: AWSPushTopic) {
        print("Successfully subscribed to a topic: \(topic.topicName)")
        //tableView.reloadData()
    }
    
    func topic(topic: AWSPushTopic, didFailToSubscribeWithError error: NSError) {
        print("Failed to subscribe to topic: \(topic.topicName)")
        //showAlertWithTitle("Error", message: "Failed to subscribe to \(topic.topicName)")
    }
    
    func topicDidUnsubscribe(topic: AWSPushTopic) {
        print("Successfully unsubscribed from a topic: \(topic)")
        //self.tableView.reloadData()
    }
    
    func topic(topic: AWSPushTopic, didFailToUnsubscribeWithError error: NSError) {
        print("Failed to subscribe to a topic: \(error)")
        //showAlertWithTitle("Error", message: "Failed to unsubscribe from : \(topic.topicName)")
    }
}

// MARK:- Utility methods


